// spontaneous = ppspont
proc perfpathStims() { local i, wgt, reli, typei, jgid, celltype, counter, jstart, jend, jtot localobj cell		// Connect the perforant path cells to the model cells
	// find ppspont index
	for celltype=0, numCellTypes-1 {
		if (strcmp(cellType[celltype].cellType_string, "ppspont")==0) {
			idx = celltype 
		}
	}
	
	for celltype=0, numCellTypes-1 {
		if (cellType[celltype].is_art==0) {
			wgt = cellType[idx].wgtConns.x[celltype]
			if (wgt > 0) {
				for pcitr(&reli, &typei, &jgid, cellType[celltype].cellStartGid, cellType[celltype].cellEndGid) {
					if (pc.gid_exists(jgid)) {
						cell = pc.gid2cell(jgid)
						wgt = cellType[idx].wgtConns.x[celltype]
						if (cell.pre_list.o(idx).count()>0) {
							nc_appendo(jgid-cellType[idx].cellEndGid-1+cellType[idx].cellStartGid, cell, idx, 0, wgt, 3)  // 1e-3
							cellType[idx].numCons.x[celltype] +=1
						}
					}
				}
			}
		}
	}
}
perfpathStims()

proc setnoise() {local reli, typei, jgid, celltype localobj cell 
	// find ppspont index
	for celltype=0, numCellTypes-1 {
		if (strcmp(cellType[celltype].cellType_string, "ppspont")==0) {
			idx = celltype 
		}
	}

	for pcitr(&reli, &typei, &jgid, cellType[idx].cellStartGid, cellType[idx].cellEndGid) {
		cell = pc.gid2cell(jgid)
		ransynlist.object(reli).r.negexp(1) // always use 1 for this - the interval for the netstim will set the 'rate'
											// for another example (which has the randomstream class defined differently,
											// and therefore calls different commands at different times) see the following file:
											// <http://senselab.med.yale.edu/modeldb/showmodel.asp?model=83319&file=\destexhe_benchmarks\NEURON\common\netstim.hoc>
											// use the ransynlist because we can continue along this stream for a very long time
											// ranconlist is a small segment reserved upstream of ransynlist, so if there is
											// a long simulation duration, then there could be a problem
		cell.noiseFromRandom(ransynlist.object(reli).r)
	}
}
setnoise()


// theta burst = ppsept
proc perfpathStims() { local addi, i, wgt, reli, typei, jgid, celltype, counter, jstart, jend, jtot localobj cell		// Connect the perforant path cells to the model cells
	// find ppsept index
	for celltype=0, numCellTypes-1 {
		if (strcmp(cellType[celltype].cellType_string, "ppsept")==0) {
			idx = celltype 
			addi = idx
		}
	}
	for celltype=0, numCellTypes-1 {
		if (strcmp(cellType[celltype].cellType_string, "ppspont")==0) {
			if (celltype>idx) {
				addi = idx
			}
		}
	}
	
	for celltype=0, numCellTypes-1 {
		if (cellType[celltype].is_art==0) {
			wgt = cellType[idx].wgtConns.x[celltype]
			if (wgt > 0) {
				for pcitr(&reli, &typei, &jgid, cellType[celltype].cellStartGid, cellType[celltype].cellEndGid) {
					if (pc.gid_exists(jgid)) {
						cell = pc.gid2cell(jgid)
						wgt = cellType[idx].wgtConns.x[celltype]
						if (cell.pre_list.o(idx).count()>0) {
							nc_appendo(jgid-cellType[addi].cellEndGid-1+cellType[idx].cellStartGid+pc.nhost*2, cell, idx, 0, wgt, 3)  // 1e-3
							cellType[idx].numCons.x[celltype] +=1
						}
					}
				}
			}
		}
	}
}
perfpathStims()

proc setupburst() {local reli, typei, jgid localobj onstimobj, offstimobj
	// find ppsept index
	for celltype=0, numCellTypes-1 {
		if (strcmp(cellType[celltype].cellType_string, "ppsept")==0) {
			idx = celltype 
		}
	}

	for pcitr(&reli, &typei, &jgid, cellType[idx].cellStartGid, cellType[idx].cellStartGid+pc.nhost-1) {
		onstimobj = pc.gid2cell(jgid) // what are the gids for these things?
		offstimobj = pc.gid2cell(jgid+pc.nhost) // what are the gids for these things?
	}
	
	//onstimobj = pc.gid2cell(cellType[idx].cellStartGid+pc.id) // what are the gids for these things?
	//offstimobj = pc.gid2cell(cellType[idx].cellStartGid+pc.id+pc.nhost) // what are the gids for these things?
	set_ctrl_stims(onstimobj,offstimobj)
}
	proc set_ctrl_stims() { // first argument is the on NetStim object, second is off
		$o1.interval = Onint+Offint
		$o1.number = 1e9
		$o1.start = 0
		$o1.noise = 0

		$o2.interval = Onint+Offint
		$o2.number = $o1.number
		$o2.start = Onint
		$o2.noise = $o1.noise
	}
setupburst()

proc addstims() {local onstimref, offstimref, reli, typei, jgid localobj cell, onstimobj, offstimobj
	// find ppsept index
	for celltype=0, numCellTypes-1 {
		if (strcmp(cellType[celltype].cellType_string, "ppsept")==0) {
			idx = celltype 
		}
	}

	for pcitr(&reli, &typei, &jgid, cellType[idx].cellStartGid, cellType[idx].cellStartGid+pc.nhost-1) {
		onstimref = jgid // what are the gids for these things?
		offstimref = jgid+pc.nhost // what are the gids for these things?
	}


	for pcitr(&reli, &typei, &jgid, cellType[idx].cellStartGid+pc.nhost*2, cellType[idx].cellEndGid) {
		if (pc.gid_exists(jgid)) {
			cell = pc.gid2cell(jgid)
			onstimobj = pc.gid2cell(onstimref) // what are the gids for these things?
			offstimobj = pc.gid2cell(offstimref) // what are the gids for these things?
			//onstimobj = pc.gid2cell(cellType[idx].cellStartGid+pc.id) // what are the gids for these things?
			//offstimobj = pc.gid2cell(cellType[idx].cellStartGid+pc.id+pc.nhost) // what are the gids for these things?
			
			//print " jgid: ", jgid, " turned on by: ", onstimref, " and off by: ", offstimref
			add_on_off(jgid, onstimobj, offstimobj)
			//cellType[0].numCons.x[0] +=2
			ransynlist.object(reli).r.negexp(1) // always use 1 for this - the interval for the netstim will set the 'rate'
												// for another example (which has the randomstream class defined differently,
												// and therefore calls different commands at different times) see the following file:
												// <http://senselab.med.yale.edu/modeldb/showmodel.asp?model=83319&file=\destexhe_benchmarks\NEURON\common\netstim.hoc>
												// use the ransynlist because we can continue along this stream for a very long time
												// ranconlist is a small segment reserved upstream of ransynlist, so if there is
												// a long simulation duration, then there could be a problem
			cell.noiseFromRandom(ransynlist.object(reli).r)
		}
	}	
}
	proc add_on_off() {localobj ns, ctrlsyn, offsyn	// arg 1: gid of the netstim to which the control on and off netstims must be attached
													// arg 2: object of the on NetStim
													// arg 3: object of the off NetStim
					
		ns = pc.gid2cell($1)

		ctrlsyn = new NetCon($o2, ns)
		ctrlsyn.weight = 1
		ctrlsyn.delay = 0
		nclist.append(ctrlsyn)


		offsyn = new NetCon($o3, ns)
		offsyn.weight = -1
		offsyn.delay = 0
		nclist.append(offsyn)
	}
addstims()
