// An approximation to the LFP generated by the pyramidal cells in the network.
// Computed as the difference in voltage between apical distal and basal dendrites.

func dipole_lfp() { local avglfp, vlfp, ncells, celltype, pci, gid, i, typei localobj cell, r
    
    for celltype=0, numCellTypes-1 {
        
	if (strcmp(cellType[celltype].cellType_string, "pyramidalcell")==0) {
	    
           vlfp = 0
	   for pcitr(&i, &typei, &gid, cellType[celltype].cellStartGid, cellType[celltype].cellEndGid) {
	       ncells = cellType[celltype].cellEndGid - cellType[celltype].cellStartGid
               cell = pc.gid2cell(gid)
               vlfp = vlfp + cell.apical_list.o(cell.apical_list.count()-1).v(0.5) - cell.basal_list.o(0).v(0.5)
           }
       }
       
   }
   
   // average over all hosts
   avglfp = pc.allreduce(vlfp, 1)/ncells
   
   return avglfp
}

objref lfplist
lfplist = new List()
        
lfp_dt = 0.5 // sampling interval for LFP
proc sample_lfp() { local avglfp localobj vec
    avglfp = dipole_lfp()
    cvode.event(t + lfp_dt, "sample_lfp()") // execute sample_lfp lfp_dt ms from now
    if (pc.id == 0) {
        vec = new Vector()
        vec.append(t, avglfp)
        lfplist.append(vec.c)
    }
}

