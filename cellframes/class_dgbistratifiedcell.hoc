begintemplate dgbistratifiedcell
ndend1=4
ndend2=4
ndend3=4
ndend4=4

public  pre_list, connect_pre, subsets, is_art, is_connected
public soma, bcdend1, bcdend2, bcdend3, bcdend4
public all, adend, bdend, cdend, ddend, basal_list, apical_list, soma_list, axon_list
create soma, bcdend1[ndend1], bcdend2[ndend2], bcdend3[ndend3], bcdend4[ndend4]
objref syn, pre_list, templist
public x, y, z, position, gid, randi
external numCellTypes, cellType

proc init() {
	gid = $1
	randi = $2
	pre_list = new List()
	subsets()
	temp()
	define_synapses()
}

objref all, adend, bdend, cdend, ddend

objref basal_list, apical_list, soma_list, axon_list
proc subsets() { local i
	objref all, adend, bdend, cdend, ddend
objref basal_list, apical_list, soma_list, axon_list
	// Make a list for every section in the cell
	all = new SectionList()	
  basal_list = new SectionList()
  apical_list = new SectionList()
  soma_list = new SectionList()
  axon_list = new SectionList()
  
		soma all.append()
		soma soma_list.append()
		for i=0, 3 bcdend1 [i] all.append()
		for i=0, 3 bcdend1 [i] apical_list.append()
		for i=0, 3 bcdend2 [i] all.append()
		for i=0, 3 bcdend2 [i] apical_list.append()
		for i=0, 3 bcdend3 [i] all.append()
		for i=0, 3 bcdend3 [i] basal_list.append()
		for i=0, 3 bcdend4 [i] all.append()
		for i=0, 3 bcdend4 [i] basal_list.append()

	adend  = new SectionList()
		bcdend1 [0] adend.append()
		bcdend2 [0] adend.append()
		bcdend3 [0] adend.append()
		bcdend4 [0] adend.append()

	bdend  = new SectionList()
		bcdend1 [1] bdend.append()
		bcdend2 [1] bdend.append()
		bcdend3 [1] bdend.append()
		bcdend4 [1] bdend.append()

	cdend  = new SectionList()
		bcdend1 [2] cdend.append()
		bcdend2 [2] cdend.append()
		bcdend3 [2] cdend.append()
		bcdend4 [2] cdend.append()

	ddend  = new SectionList()
		bcdend1 [3] ddend.append()
		bcdend2 [3] ddend.append()
		bcdend3 [3] ddend.append()
		bcdend4 [3] ddend.append()
}

proc temp() {

	soma {nseg=1 L=20 diam=15} // changed L & diam
		
	bcdend1 [0] {nseg=1 L=75 diam=4}	// bcdend 1 and 2 are apical
	bcdend1 [1] {nseg=1 L=75 diam=3}
	bcdend1 [2] {nseg=1 L=75 diam=2}
 	bcdend1 [3] {nseg=1 L=75 diam=1}

	bcdend2 [0] {nseg=1 L=75 diam=4}
	bcdend2 [1] {nseg=1 L=75 diam=3}
	bcdend2 [2] {nseg=1 L=75 diam=2}
	bcdend2 [3] {nseg=1 L=75 diam=1}
 		 
	bcdend3 [0] {nseg=1 L=50 diam=4} 	// bcdend 3 and 4 are basal
	bcdend3 [1] {nseg=1 L=50 diam=3}
	bcdend3 [2] {nseg=1 L=50 diam=2}
	bcdend3 [3] {nseg=1 L=50 diam=1} 
	
	bcdend4 [0] {nseg=1 L=50 diam=4}
	bcdend4 [1] {nseg=1 L=50 diam=3}
	bcdend4 [2] {nseg=1 L=50 diam=2}
	bcdend4 [3] {nseg=1 L=50 diam=1} 	

    
	forsec all {
		insert iconc_Ca
			catau_iconc_Ca = 10
			caiinf_iconc_Ca = 5.e-6
		insert ch_KvA
			gmax_ch_KvA=0.00015
		insert ch_CavN
			gmax_ch_CavN=0.0008   
		insert ch_CavL 
			gmax_ch_CavL=0.005
		insert ch_KCaS
			gmax_ch_KCaS=0.000002
		insert ch_KvCaB
			gmax_ch_KvCaB=0.0002
	}

	soma {
		insert ch_Nav
			gmax_ch_Nav=0.12  
		insert ch_Kdrfast
			gmax_ch_Kdrfast=0.013  
		insert ch_leak
			gmax_ch_leak  = 0.00018
		cm=1.4
	} 

	forsec adend {
		insert ch_Nav
			gmax_ch_Nav=0.12  
		insert ch_Kdrfast
			gmax_ch_Kdrfast=0.013
		insert ch_leak
			gmax_ch_leak  = 0.00018
		cm=1.4
	}	
		
	forsec	bdend {
		insert na_ion
		insert ch_leak
			gmax_ch_leak  = 0.00018
		cm=1.4
	}
		
	forsec 	cdend {
		insert na_ion
		insert ch_leak
			gmax_ch_leak  = 0.00018
		cm=1.4
	}

	forsec	ddend {
		insert na_ion
		insert ch_leak
			gmax_ch_leak  = 0.00018
		cm=1.4
	}


	connect bcdend1[0](0), soma(1)
	connect bcdend2[0](0), soma(1)
	connect bcdend3[0](0), soma(0)
	connect bcdend4[0](0), soma(0)
	for i=1,3 {
	connect bcdend1[i](0), bcdend1[i-1](1)
	}
	for i=1,3 {
	connect bcdend2[i](0), bcdend2[i-1](1)
	}
	for i=1,3 {
	connect bcdend3[i](0), bcdend3[i-1](1)
	}
	for i=1,3 {
	connect bcdend4[i](0), bcdend4[i-1](1)
	}


	forsec all {
	Ra=100
	ek=-90
	elca=130
	ena = 55 
	e_ch_leak =-60.06
	cao_iconc_Ca=2  // make catau slower70e-3 	cao=2 cai=50.e-6 
	}
}

	proc connect_pre() {  // $o1 target point process, $o2 returned NetCon
	soma $o2 = new NetCon (&v(1), $o1)
			$o2.threshold = 10 //except for bcell to bcell, which is -10???

	}

func is_art() { return 0 }
proc position(){ local i
		forall {
		for i = 0, n3d()-1 {
			pt3dchange(i, $1-x+x3d(i), $2-y+y3d(i), $3-z+z3d(i), diam3d(i))
		}
}
	x = $1  y = $2  z = $3	
}

objref syn  
proc define_synapses() {


}
endtemplate dgbistratifiedcell
