proc perfpathStims() { local i, wgt, reli, typei, jgid, celltype, counter, jstart, jend, jtot localobj cell		// Connect the perforant path cells to the model cells
	for celltype=1, numCellTypes-1 {
		wgt = cellType[0].wgtConns.x[celltype]
		if (wgt > 0) {
			for pcitr(&reli, &typei, &jgid, cellType[celltype].cellStartGid, cellType[celltype].cellEndGid) {
				if (pc.gid_exists(jgid)) {
					cell = pc.gid2cell(jgid)
					wgt = cellType[0].wgtConns.x[celltype]
					if (cell.pre_list.o(0).count()>0) {
						nc_appendo(jgid-cellType[0].cellEndGid-1, cell, 0, 0, wgt, 3)  // 1e-3
						cellType[0].numCons.x[celltype] +=1
					}
				}
			}
		}
	}
}
perfpathStims()

proc setnoise() {local reli, typei, jgid, celltype localobj cell 
	celltype = 0
	for pcitr(&reli, &typei, &jgid, cellType[celltype].cellStartGid, cellType[celltype].cellEndGid) {
		cell = pc.gid2cell(jgid)
		ransynlist.object(reli).r.negexp(1) // always use 1 for this - the interval for the netstim will set the 'rate'
											// for another example (which has the randomstream class defined differently,
											// and therefore calls different commands at different times) see the following file:
											// <http://senselab.med.yale.edu/modeldb/showmodel.asp?model=83319&file=\destexhe_benchmarks\NEURON\common\netstim.hoc>
											// use the ransynlist because we can continue along this stream for a very long time
											// ranconlist is a small segment reserved upstream of ransynlist, so if there is
											// a long simulation duration, then there could be a problem
		cell.noiseFromRandom(ransynlist.object(reli).r)
	}
}
setnoise()
